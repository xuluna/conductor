# Copyright (c) 2014, Neville-Neil Consulting
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of Neville-Neil Consulting nor the names of its 
# contributors may be used to endorse or promote products derived from 
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: George V. Neville-Neil
#
# Description: The Player listens on a well known port and executes
# commands as they are passed in, returning the reults up the pipe.

import socket
import configparser
import sys
import pickle
import pickletools

from conductor import config
from conductor import phase
from conductor import step
from conductor import retval
from conductor import run

class Player():

    done = False
    sock = None
    config = None
    phases = []
    results = []
    
    def __init__(self, command, key = None):
        self.cmdsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
        self.cmdsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.cmdsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        self.cmdsock.bind(command)
        self.cmdsock.listen(5)
        
    def run(self):
        """Run through our work queue"""
        while not self.done:
            sock,addr = self.cmdsock.accept()
            data = sock.recv(65536)
            message = pickle.loads(data)
            if type(message) == config.Config:
                self.config = message
                ret = retval.RetVal(retval.RETVAL_OK,
                                    "config received")
                ret.send(sock)
            elif type(message) == phase.Phase:
                self.phases.append(message)
                ret = retval.RetVal(retval.RETVAL_OK,
                                    "phase received")
                ret.send(sock)
            elif type(message) == run.Run:
                print ("RUN")
                for next in self.phases:
                    next.run()
                    next.return_results()
                self.phases = []
            else:
                ret = retval.RetVal(retval.RETVAL_BAD_CMD,
                                    "no such command")
                ret.send(sock)
            sock.close()


def __main__():

    local_config = configparser.ConfigParser()
    local_config.read(sys.argv[1]) # Cheap and sleazy for now

    defaults = local_config['Master']
    cmdport = int(defaults['cmdport'])

    play = Player(('0.0.0.0', cmdport))
    play.run()
    
if __name__ == "__main__":
    __main__()
